.section ".word"
   /* Game state memory locations */
  .equ CURR_STATE, 0x90001000       /* Current state of the game */
  .equ GSA_ID, 0x90001004           /* ID of the GSA holding the current state */
  .equ PAUSE, 0x90001008            /* Is the game paused or running */
  .equ SPEED, 0x9000100C            /* Current speed of the game */
  .equ CURR_STEP,  0x90001010       /* Current step of the game */
  .equ SEED, 0x90001014             /* Which seed was used to start the game */
  .equ GSA0, 0x90001018             /* Game State Array 0 starting address */
  .equ GSA1, 0x90001058             /* Game State Array 1 starting address */
  .equ CUSTOM_VAR_START, 0x90001200 /* Start of free range of addresses for custom vars */
  .equ CUSTOM_VAR_END, 0x90001300   /* End of free range of addresses for custom vars */
  .equ RANDOM, 0x40000000           /* Random number generator address */
  .equ LEDS, 0x50000000             /* LEDs address */
  .equ SEVEN_SEGS, 0x60000000       /* 7-segment display addresses */
  .equ BUTTONS, 0x70000004          /* Buttons address */

  /* States */
  .equ INIT, 0
  .equ RAND, 1
  .equ RUN, 2

  /* Colors (0bBGR) */
  .equ RED, 0x100
  .equ BLUE, 0x400

  /* Buttons */
  .equ JT, 0x10
  .equ JB, 0x8
  .equ JL, 0x4
  .equ JR, 0x2
  .equ JC, 0x1
  .equ BUTTON_2, 0x80
  .equ BUTTON_1, 0x20
  .equ BUTTON_0, 0x40

  /* LED selection */
  .equ ALL, 0xF

  /* Constants */
  .equ N_SEEDS, 4           /* Number of available seeds */
  .equ N_GSA_LINES, 10       /* Number of GSA lines */
  .equ N_GSA_COLUMNS, 12    /* Number of GSA columns */
  .equ MAX_SPEED, 10        /* Maximum speed */
  .equ MIN_SPEED, 1         /* Minimum speed */
  .equ PAUSED, 0x00         /* Game paused value */
  .equ RUNNING, 0x01        /* Game running value */

.section ".text.init"
  .globl main

main:
  li sp, CUSTOM_VAR_END /* Set stack pointer, grows downwards */ 
  # call reset_game

  # TODO use constants

  main_loop:

    jal reset_game

    main_loop_inner:
      jal get_input
      mv s0, a0

      jal select_action

      mv a0, s0
      jal update_state

      jal update_gsa

      # jal clear_leds

      jal mask

      jal draw_gsa

      jal wait

      jal decrement_step
      bnez a0, main_loop_inner


  j main_loop

/* BEGIN:clear_leds */
clear_leds: 
  li t1, LEDS
  li t2, 0b11111111111
  sw t2, 0(t1)
  ret
/* END:clear_leds */

/* BEGIN:set_pixel */
set_pixel:

  mv t1, a0

  slli t2, a1, 4
  or t1, t1, t2
  
  li t2, 0b001
  slli t2, t2, 8
  or t1, t1, t2

  li t2, 1
  slli t2, t2, 16
  or t1, t1, t2

  li t2, LEDS
  sw t1, 0(t2)

  ret

/* END:set_pixel */

/* BEGIN:wait */
wait:    
  li t1, 2
  slli t1, t1, 10

  li t2, SPEED
  lw t2, 0(t2)

wait_loop:
  sub t1, t1, t2
  bge t1, zero, wait_loop

  ret

/* END:wait */

/* BEGIN:set_gsa */
set_gsa:
  li t1, GSA_ID
  lw t1, (t1)
  
  beq t1, zero, set_gsa_0

  li t1, GSA1
  j set_gsa_end

set_gsa_0:
  li t1, GSA0

set_gsa_end:
  slli t2, a1, 2
  add t1, t1, t2

  sw a0, (t1)

  ret

/* END:set_gsa */

/* BEGIN:get_gsa */
get_gsa:
  li t1, GSA_ID
  lw t1, 0(t1)
  
  beq t1, zero, get_gsa_0

  li t1, GSA1
  j get_gsa_end

get_gsa_0:
  li t1, GSA0

get_gsa_end:
  slli t2, a0, 2
  add t1, t1, t2

  lw a0, 0(t1)

  ret


/* END:get_gsa */

/* BEGIN:draw_gsa */
draw_gsa:
  addi sp, sp, -16
  sw ra, 0(sp)
  sw s0, 4(sp)
  sw s1, 8(sp)
  sw s2, 12(sp)

  li s0, 9
  draw_gsa_row_loop:

    mv a0, s0
    jal get_gsa
    mv t0, a0

    li t1, 0b1111

    slli t2, s0, 4
    or t1, t1, t2

    li t2, RED
    or t1, t1, t2

    slli t2, t0, 16
    or t1, t1, t2

    li t2, LEDS
    sw t1, (t2)
      
  addi s0, s0, -1
  bgez s0, draw_gsa_row_loop
  
  lw ra, 0(sp)
  lw s0, 4(sp)
  lw s1, 8(sp)
  lw s2, 12(sp)
  addi sp, sp, 16
  ret
  
/* END:draw_gsa */

/* BEGIN:random_gsa */
random_gsa:           
  addi sp, sp, -8
  sw ra, 0(sp)
  sw s0, 4(sp)

  li s0, 9
  random_gsa_loop:

    li t0, RANDOM
    lw a0, (t0)
    mv a1, s0
    jal set_gsa

  addi s0, s0, -1
  bgez s0, random_gsa_loop

  lw ra, 0(sp)
  lw s0, 4(sp)
  addi sp, sp, 8
  ret

/* END:random_gsa */

/* BEGIN:change_speed */
change_speed:
  li t2, SPEED
  lb t0, (t2)

  beqz a0, increment

  li t1, 1
  beq t0, t1, change_speed_end

  addi t0, t0, -1
  sb t0, (t2)
  j change_speed_end

  increment:

  li t1, 10
  beq t0, t1, change_speed_end

  addi t0, t0, 1
  sb t0, (t2)
  
  change_speed_end:
  ret



/* END:change_speed */

/* BEGIN:pause_game */
pause_game:
  li t0, PAUSE
  lb t1, (t0)
  not t1, t1
  andi t1, t1, 1
  sb t1, (t0)
  ret
/* END:pause_game */

/* BEGIN:change_steps */
change_steps:           
  li t0, CURR_STEP
  lw t1, (t0)

  add t1, t1, a0

  slli a1, a1, 4
  add t1, t1, a1

  slli a2, a2, 8
  add t1, t1, a2

  li t2, 0xfff
  and t1, t1, t2

  sw t1, (t0)
  ret

/* END:change_steps */

/* BEGIN:set_seed */
set_seed:
  addi sp, sp, -12
  sw ra, 0(sp)
  sw s0, 4(sp)
  sw s1, 8(sp)

  la t0, SEEDS
  slli a0, a0, 2
  add t0, t0, a0

  lw s0, (t0)

  li s1, 9
  set_seed_loop:

  slli t0, s1, 2
  add t0, t0, s0
  lw a0, (t0)
  mv a1, s1
  jal set_gsa

  addi s1, s1, -1
  bgez s1, set_seed_loop

  lw ra, 0(sp)
  lw s0, 4(sp)
  lw s1, 8(sp)
  addi sp, sp, 12

  ret

/* END:set_seed */

/* BEGIN:increment_seed */
increment_seed:                
  addi sp, sp, -4
  sw ra, (sp)

  li t0, SEED
  lw t1, (t0)
  addi t1, t1, 1
  sw t1, (t0)

  li t0, N_SEEDS
  bge t1, t0, increment_seed_random

  mv a0, t1
  jal set_seed
  j increment_seed_end 

increment_seed_random:
  jal random_gsa

increment_seed_end:
  lw ra, (sp)
  addi sp, sp, 4
  ret
    
/* END:increment_seed */

/* BEGIN:update_state */
update_state:
  addi sp, sp, -4
  sw ra, (sp)

  li t6, CURR_STATE

  lw t0, (t6)
  li t1, INIT
  beq t0, t1, update_state_init
  li t1, RAND
  beq t0, t1, update_state_change_to_run_if_jr
  li t1, RUN
  beq t0, t1, update_state_run
  j update_state_end

update_state_init:
  li t0, JC
  and t0, t0, a0
  beqz t0, update_state_change_to_run_if_jr

  li t0, N_SEEDS
  li t1, SEED
  lw t1, (t1)
  bne t1, t0, update_state_change_to_run_if_jr

  li t0, RAND
  sw t0, (t6)
  j update_state_end

update_state_change_to_run_if_jr:
  li t0, JR
  and t0, t0, a0
  beqz t0, update_state_end

  li t0, RUN
  sw t0, (t6)
  li t0, PAUSE
  li t1, RUNNING
  sw t1, (t0)

  j update_state_end
  
update_state_run:
  li t0, JB
  and t0, a0, t0
  beqz t0, update_state_end

  jal reset_game

  j update_state_end


update_state_end:
  lw ra, (sp)
  addi sp, sp, 4
  ret



/* END:update_state */

/* BEGIN:select_action */
select_action:
  addi sp, sp, -4
  sw ra, (sp)

  li t0, CURR_STATE
  lw t0, (t0)
  li t1, INIT
  beq t0, t1, select_action_init
  li t1, RAND
  beq t0, t1, select_action_rand
  j select_action_run

select_action_init:
  li t0, JC
  and t0, t0, a0
  beqz t0, select_action_steps

  jal increment_seed
  j select_action_end

select_action_rand:
  li t0, JC
  and t0, t0, a0
  beqz t0, select_action_steps

  jal random_gsa
  j select_action_end

select_action_steps:
  mv t6, a0
  mv a0, zero
  mv a1, zero
  mv a2, zero

  li t0, BUTTON_0
  and t0, t0, t6
  beqz t0, select_action_steps_1
  li a0, 1
select_action_steps_1:
  li t0, BUTTON_1
  and t0, t0, t6
  beqz t0, select_action_steps_2
  li a1, 1
select_action_steps_2:
  li t0, BUTTON_2
  and t0, t0, t6
  beqz t0, select_action_steps_end
  li a2, 1
select_action_steps_end:
  jal change_steps
  j select_action_end

select_action_run:
  li t0, JC
  and t0, t0, a0
  bnez t0, select_action_run_jc

  li t0, JR
  and t0, t0, a0
  bnez t0, select_action_run_jr

  li t0, JL
  and t0, t0, a0
  bnez t0, select_action_run_jl

  li t0, JT
  and t0, t0, a0
  bnez t0, select_action_run_jt

  j select_action_end

select_action_run_jc:
  jal pause_game
  j select_action_end

select_action_run_jr:
  li a0, 0
  jal change_speed
  j select_action_end

select_action_run_jl:
  li a0, 1
  jal change_speed
  j select_action_end

select_action_run_jt:
  jal random_gsa
  j select_action_end


select_action_end:
  lw ra, (sp)
  addi sp, sp, 4
  ret
  
/* END:select_action */

/* BEGIN:cell_fate */
cell_fate:
  beqz a1, cell_fate_in_dead

  li t0, 2
  blt a0, t0, cell_fate_out_dead
  li t0, 4
  bge a0, t0, cell_fate_out_dead
  j cell_fate_out_alive

cell_fate_in_dead:
  li t0, 3
  beq t0, a0, cell_fate_out_alive
  j cell_fate_out_dead

cell_fate_out_alive:
  li a0, 1
  ret

cell_fate_out_dead:
  li a0, 0
  ret
/* END:cell_fate */

/* BEGIN:find_neighbours */
find_neighbours:
  addi sp, sp, -28
  sw ra, 0(sp)
  sw s0, 4(sp)
  sw s1, 8(sp)
  sw s2, 12(sp)
  sw s3, 16(sp)
  sw s4, 20(sp)
  sw s5, 24(sp)

  mv s2, a1
  mv s3, a0
  mv s5, zero

  li s0, 2
  find_neighbours_loop_y:
    addi t0, s0, -1
    add t0, t0, s2
    bgez t0, find_neighbours_y_positive
      addi t0, t0, N_GSA_LINES
    find_neighbours_y_positive:
    li t1, N_GSA_LINES
    blt t0, t1, find_neighbours_loop_y_low_enough
      addi t0, t0, -N_GSA_LINES
    find_neighbours_loop_y_low_enough:
    mv a0, t0
    jal get_gsa
    mv t0, a0

    li s1, 2
    find_neighbours_loop_x:
      addi t1, s1, -1
      add t1, t1, s3
      bgez t1, find_neighbours_x_positive
        addi t1, t1, N_GSA_COLUMNS
      find_neighbours_x_positive:
      li t2, N_GSA_COLUMNS
      blt t1, t2, find_neighbours_loop_x_low_enough
        addi t1, t1, -N_GSA_COLUMNS
      find_neighbours_loop_x_low_enough:

      srl t3, t0, t1
      andi t3, t3, 1

      li t1, 1
      bne s0, t1, find_neighbours_else
      bne s1, t1, find_neighbours_else
        mv s4, t3
      j find_neighbours_endif
      find_neighbours_else:
        add s5, s5, t3
      find_neighbours_endif:

    addi s1, s1, -1
    bgez s1, find_neighbours_loop_x

  addi s0, s0, -1
  bgez s0, find_neighbours_loop_y

  mv a0, s5
  mv a1, s4

  lw ra, 0(sp)
  lw s0, 4(sp)
  lw s1, 8(sp)
  lw s2, 12(sp)
  lw s3, 16(sp)
  lw s4, 20(sp)
  lw s5, 24(sp)
  addi sp, sp, 28
  ret

/* END:find_neighbours */

/* BEGIN:update_gsa */
update_gsa:

  li t0, PAUSE
  lw t0, (t0)
  li t1, PAUSED
  bne t0, t1, update_gsa_do
    ret
  update_gsa_do:

  addi sp, sp, -16
  sw ra, 0(sp)
  sw s0, 4(sp)
  sw s1, 8(sp)
  sw s2, 12(sp)

  li s0, N_GSA_LINES
  addi s0, s0, -1
  update_gsa_loop_y:

    li s2, 0

    li s1, N_GSA_COLUMNS
    addi s1, s1, -1
    update_gsa_loop_x:

      mv a0, s1
      mv a1, s0
      jal find_neighbours
      jal cell_fate

      sll t0, a0, s1
      or s2, s2, t0

    addi s1, s1, -1
    bgez s1, update_gsa_loop_x

    li t0, GSA_ID
    lw t0, (t0)
    bnez t0, update_gsa_else
      li t0, GSA1
    j update_gsa_endif
    update_gsa_else:
      li t0, GSA0
    update_gsa_endif:

    slli t1, s0, 2
    add t0, t0, t1
    sw s2, (t0)
    

  addi s0, s0, -1
  bgez s0, update_gsa_loop_y

  li t0, GSA_ID
  lw t1, (t0)
  not t1, t1
  andi t1, t1, 1
  sw t1, (t0)

  lw ra, 0(sp)
  lw s0, 4(sp)
  lw s1, 8(sp)
  lw s2, 12(sp)
  addi sp, sp, 16
  ret
/* END:update_gsa */

/* BEGIN:get_input */
get_input:
  li t0, BUTTONS
  lw a0, (t0)
  sw zero, (t0)
  ret

/* END:get_input */

/* BEGIN:decrement_step */
decrement_step:
  li t6, CURR_STEP
  lw t6, (t6)

  li t0, CURR_STATE
  lw t0, (t0)
  li t1, RUN
  bne t0, t1, decrement_step_display
  li t0, PAUSE
  lw t0, (t0)
  li t1, PAUSED
  beq t0, t1, decrement_step_display
  bnez t6, decrement_step_decrement
  mv a0, zero
  ret

  decrement_step_decrement:
  addi t6, t6, -1
  li t0, CURR_STEP
  sw t6, (t0)

  decrement_step_display:
  li t5, 0
  li t0, 3
  decrement_step_loop:
    slli t1, t0, 2
    srl t2, t6, t1
    andi t2, t2, 0xf
    
    la t3, font_data
    slli t2, t2, 2
    add t2, t2, t3
    lw t2, (t2)

    slli t1, t0, 3
    sll t2, t2, t1
    or t5, t5, t2

  addi t0, t0, -1
  bgez t0, decrement_step_loop

  li t6, SEVEN_SEGS
  sw t5, (t6)

  li a0, 1
  ret
/* END:decrement_step */

/* BEGIN:reset_game */
reset_game:
  addi sp, sp, -4
  sw ra, (sp)

  li t0, GSA_ID
  sw zero, (t0)

  li t0, CURR_STATE
  li t1, INIT
  sw t1, (t0)

  li t0, SEED
  sw zero, (t0)
  li a0, 0
  jal set_seed

  li t0, PAUSE
  li t1, PAUSED
  sw t1, (t0)

  li t0, SPEED
  li t1, MIN_SPEED
  sw t1, (t0)

  li t0, CURR_STEP
  li t1, 1
  sw t1, (t0)
  jal decrement_step

  jal draw_gsa

  lw ra, (sp)
  addi sp, sp, 4

  ret

/* END:reset_game */

/* BEGIN:mask */
mask:
  addi sp, sp, -16
  sw ra, 0(sp)
  sw s0, 4(sp)
  sw s1, 8(sp)
  sw s2, 12(sp)

  li t0, SEED
  lw t0, (t0)
  li t1, N_SEEDS
  blt t0, t1, mask_endif
    li t0, N_SEEDS
  mask_endif:

  slli t0, t0, 2
  la t1, MASKS
  add t0, t0, t1
  lw s0, (t0)

  li s1, N_GSA_LINES
  addi s1, s1, -1
  mask_loop:

    li t2, 0b1111
    
    mv t3, s1
    slli t3, t3, 4
    or t2, t2, t3

    li t3, 0b100
    slli t3, t3, 8
    or t2, t2, t3

    slli t3, s1, 2
    add t3, t3, s0
    lw t3, (t3)
    mv s2, t3
    not t3, t3
    slli t3, t3, 16
    or t2, t2, t3

    li t3, LEDS
    sw t2, (t3)

    mv a0, s1
    jal get_gsa
    and a0, a0, s2
    mv a1, s1
    jal set_gsa

  addi s1, s1, -1
  bgez s1, mask_loop

  lw ra, 0(sp)
  lw s0, 4(sp)
  lw s1, 8(sp)
  lw s2, 12(sp)
  addi sp, sp, 16

  ret

/* END:mask */

/* 7-segment display */
font_data:
  .word 0x3F
  .word 0x06
  .word 0x5B
  .word 0x4F
  .word 0x66
  .word 0x6D
  .word 0x7D
  .word 0x07
  .word 0x7F
  .word 0x6F
  .word 0x77
  .word 0x7C
  .word 0x39
  .word 0x5E
  .word 0x79
  .word 0x71

  seed0:
	.word 0xC00
	.word 0xC00
	.word 0x000
	.word 0x060
	.word 0x0A0
	.word 0x0C6
	.word 0x006
	.word 0x000
  .word 0x000
  .word 0x000

seed1:
	.word 0x000
	.word 0x000
	.word 0x05C
	.word 0x040
	.word 0x240
	.word 0x200
	.word 0x20E
	.word 0x000
  .word 0x000
  .word 0x000

seed2:
	.word 0x000
	.word 0x010
	.word 0x020
	.word 0x038
	.word 0x000
	.word 0x000
	.word 0x000
	.word 0x000
  .word 0x000
  .word 0x000

seed3:
	.word 0x000
	.word 0x000
	.word 0x090
	.word 0x008
	.word 0x088
	.word 0x078
	.word 0x000
	.word 0x000
  .word 0x000
  .word 0x000


# Predefined seeds
SEEDS:
  .word seed0
  .word seed1
  .word seed2
  .word seed3

mask0:
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
  .word 0xFFF
  .word 0xFFF

mask1:
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0x1FF
	.word 0x1FF
	.word 0x1FF
  .word 0x1FF
  .word 0x1FF

mask2:
	.word 0x7FF
	.word 0x7FF
	.word 0x7FF
	.word 0x7FF
	.word 0x7FF
	.word 0x7FF
	.word 0x7FF
	.word 0x7FF
  .word 0x7FF
  .word 0x7FF

mask3:
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0x000
  .word 0x000
  .word 0x000

mask4:
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0xFFF
	.word 0x000
  .word 0x000
  .word 0x000

MASKS:
  .word mask0
  .word mask1
  .word mask2
  .word mask3
  .word mask4
